datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company             Company?     @relation(fields: [companyId], references: [id])
  companyId           String?      @db.ObjectId
  role                Role         @default(EMPLOYEE)
  createdClients      Client[]
  createdQuotes       Quote[]
  createdCatalogItems CatalogRow[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
  @@map("authenticators")
}

model Company {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  commercialName String
  companyPrefix  String?
  email          String
  siren          String  @unique
  siret          String  @unique
  category       String?
  activityCode   String  @unique
  address        String
  mainPhone      String
  secondaryPhone String?
  currency       String
  capital        String
  legalForm      String
  taxId          String
  rcs            String

  users User[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  companyFeatures CompanyFeature[]
  clients         Client[]
  quotes          Quote[]
  catalogRows     CatalogRow[]

  @@map("companies")
}

enum Role {
  OWNER
  EMPLOYEE
}

model Feature {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  companyFeatures CompanyFeature[]

  @@map("features")
}

model CompanyFeature {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  companyId       String  @db.ObjectId
  featureId       String  @db.ObjectId
  isActive        Boolean @default(false)
  authorizedRoles Role[]

  company Company @relation(fields: [companyId], references: [id])
  feature Feature @relation(fields: [featureId], references: [id])

  @@unique([companyId, featureId])
  @@map("company_features")
}

model Client {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  address        String
  mainPhone      String
  secondaryPhone String?
  email          String
  companyId      String  @db.ObjectId
  createdById    String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  createdBy User    @relation(fields: [createdById], references: [id])
  company   Company @relation(fields: [companyId], references: [id])
  quotes    Quote[]

  @@map("clients")
}

enum QuoteStatus {
  DRAFT
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum QuoteRowType {
  SERVICE
  PRODUCT
}

enum TaxRate {
  TAX_20
  TAX_10
  TAX_5_5
  TAX_0
}

model Quote {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  referenceId    String   @unique
  expirationDate DateTime
  comment        String?
  totalET        Float    @default(0)
  totalIT        Float    @default(0)

  status QuoteStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  clientId    String     @db.ObjectId
  client      Client     @relation(fields: [clientId], references: [id])
  createdById String     @db.ObjectId
  createdBy   User       @relation(fields: [createdById], references: [id])
  rows        QuoteRow[]
  company     Company?   @relation(fields: [companyId], references: [id])
  companyId   String?    @db.ObjectId

  @@map("quotes")
}

model CatalogRow {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  unit      String       @default("unité")
  unitPrice Float
  taxRate   TaxRate      @default(TAX_20)
  type      QuoteRowType

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  company     Company @relation(fields: [companyId], references: [id])
  companyId   String  @db.ObjectId
  createdBy   User    @relation(fields: [createdById], references: [id])
  createdById String  @db.ObjectId

  @@map("catalog_rows")
}

model QuoteRow {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  unit      String  @default("unité")
  unitPrice Float
  taxRate   TaxRate @default(TAX_20)
  quantity  Float
  totalET   Float // Exclude Tax (HT)
  totalIT   Float // Include Tax (TTC)

  order Int          @default(0)
  type  QuoteRowType

  quote   Quote?  @relation(fields: [quoteId], references: [id])
  quoteId String? @db.ObjectId

  @@map("quote_rows")
}
