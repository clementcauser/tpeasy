datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  role      Role     @default(EMPLOYEE)

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Company {
  id             String  @id @default(cuid())
  commercialName String
  siren          String  @unique
  siret          String  @unique
  category       String?
  activityCode   String  @unique
  address        String
  mainPhone      String
  secondaryPhone String?
  currency       String
  capital        String

  users User[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  companyFeatures CompanyFeature[]

  @@map("companies")
}

enum Role {
  OWNER
  EMPLOYEE
}

model Feature {
  id          String  @id @default(cuid())
  name        String
  description String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  companyFeatures CompanyFeature[]

  @@map("features")
}

model CompanyFeature {
  id        String  @id @default(cuid())
  companyId String
  featureId String
  isActive  Boolean @default(false)

  company Company @relation(fields: [companyId], references: [id])
  feature Feature @relation(fields: [featureId], references: [id])

  @@unique([companyId, featureId])
  @@map("company_features")
}
